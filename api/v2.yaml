---
openapi: "3.2.0"
info:
  title: REST API
  version: 2
  description: |-

    # Overview

    Checkout out **[the Botanalytics Postman documentation.](https://www.postman.com/botanalytics/workspace/official-botanalytics-workspace/documentation/23965665-167c8511-a61f-4ceb-88bf-bedfbf10d226?entity=&branch=&version=)** We hope it makes it easier to explore the Botanalytics REST API and we’re also keen to hear any feedback that you might have on **[our feedback forum.](https://feedback.beta.botanalytics.co/)**


    # Introduction 

     The Botanalytics  **[API](https://en.wikipedia.org/wiki/API)**
     is organized around **[REST](https://en.wikipedia.org/wiki/Representational_State_Transfer)**. Our  API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We support **[cross-origin resource sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)**, allowing you to interact securely with our API from a client-side web application (though you should never expose your secret API token in any public website's client-side code). **[JSON](https://www.json.org/json-en.html)** is returned by all API responses, including errors, although our API libraries convert responses to appropriate language-specific objects. 

     Be sure to subscribe to Botanalytics's API announce mailing list to receive information on new additions and changes to Botanalytics's API
     and language libraries.

    ## Authentication

     The Botanalytics API authentication is organized around **[JWT authentication.](https://jwt.io/introduction)**  Authenticate your account by including your JWT token in API requests. You can manage your API tokens for the each channel in the Project settings. Your JWT API token carry many privileges, so it's crucial to keep them secure. Avoid sharing your API token in public areas like GitHub or client-side code and so forth. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. It's important to note that API requests without proper authentication will also fail.

    ## Supported Authentication Methods
     
     The Botanalytics REST API uses Bearer authentication (also called token authentication) is an **[HTTP authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)** that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a channel creation request. The client must send this token in the Authorization header when making requests to protected resources. Follow the steps below to obtain and use an API key:


    1. #### Obtaining an API Key: 
     To obtain an  API
     key, sign up for a Botanalytics account **[at](https://login.beta.botanalytics.co/)**. Once you have created an account, navigate to your project settings or 
     dashboard to generate an API
     key.

    2. #### Including the API Key: 
    To include the API key in your requests:

       - #### Request Header: 
       Include the API
     key in the `Authorization` header as a Bearer token. The header should be formatted as follows:
         

        ```shell  
        Authorization: Bearer BOTANALYTICS_API_KEY
        ``` 

    Please note the following security best practices for API
     key usage:

    - **Keep API
     Keys Secure**: Treat your API
     key as a sensitive credential and keep it confidential. Do not expose your API
     key in client-side code or publicly accessible websites.

    - **Secure Storage**: Store your API
     key securely, following industry best practices. Consider using encryption or secure key management systems to protect your API
     key.

    - **Transmitting API
     Keys**: When transmitting the API
     key over the network, ensure that you use secure channels such as HTTPS to encrypt the communication.

    - **Scoped Access**: Depending on the API
     design, certain endpoints or actions may require specific permissions or scopes. Review the API
     documentation to understand any additional authorization requirements for specific API
     functionalities.

    If you encounter authentication errors or issues, the API
    will respond with appropriate error codes and messages. Ensure that you handle these errors gracefully.

    Remember to adapt the instructions and examples to match the specific details and conventions of the Botanalytics API
    authentication process.


    ## Errors

    When you interact with the Botanalytics API
    , it's important to handle errors gracefully to ensure a smooth integration and provide a good user experience. The API
     returns appropriate HTTP response codes and error messages to indicate and describe any errors that occur.

     Botanalytics uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx`  range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Botanalytics's servers.


    **HTTP Response Codes**

    | Status Code          | Status Name      | Description                                                                                              |
    | -------------------- | ---------------- | -------------------------------------------------------------------------------------------------------- |
    | `200`, `201`             | OK               | Everything worked as expected (some API calls may return 201 instead).                                    |
    | `400`                  | Bad Request      | The request was unacceptable, often due to missing a required parameter.                                  |
    | `401`                  | Unauthorized     | You forgot to include your API token or it is wrong.                                                     |
    | `404`                  | Not Found        | The requested resource doesn't exist.                                                                    |
    | `500`, `502`, `503`, `504`   | Server Errors    | Something went wrong on Botanalytics's end. Try again later. (These are rare.)                           |



    ## Error Messages

    In addition to the HTTP response codes, the API
     provides detailed error messages in the response body to help you identify and troubleshoot issues. Error messages are returned in JSON format and typically include information such as the error code and a descriptive message.

    Make sure you read the response body to extract and handle error messages appropriately. The error messages can provide insights into the specific issue you encountered and guide you in resolving it.

    ## API libraries


    Official libraries for the Botanalytics API are available in several languages such as **[Node.js](https://www.npmjs.com/package/@botanalytics/core)** and **[Python.](https://pypi.python.org/pypi/botanalytics/)**

servers:
  - url: 'https://api.beta.botanalytics.co/v2'
    description: Production
tags:
  - description: 
    name: Facebook Messenger Send Api
  - description:  
    name: amazon-alexa
  - description:  
    name: microsoft-bot-framework
  - description:  
    name: likes
  - description:  
    name: samsung-bixby
  - description:  
    name: rasa
  - description: 
    name: Facebook Messenger Webhook
webhooks:
  # Each webhook needs a name
  newPet:
    # This is a Path Item Object, the only difference is that the request is initiated by the API provider
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Thread"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
paths:
  "/messages":
    post:
      deprecated: true
      description: |
        Get recent media from a geography subscription that you created.

        **Note:** You can only access Geographies that were explicitly created by your OAuth client. Check the
        Geography Subscriptions section of the [real-time updates page](https://instagram.com/developer/realtime/).
        When you create a subscription to some geography that you define, you will be returned a unique `geo-id` that
        can be used in this query. To backfill photos from the location covered by this geography, use the
        [media search endpoint](https://instagram.com/developer/endpoints/media/).

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      parameters:
        - description: The geography ID.
          in: path
          name: geo-id
          required: true
          type: string
        - description: Max number of media to return.
          format: int32
          in: query
          name: count
          required: false
          type: integer
        - description: Return media before this `min_id`.
          in: query
          name: min_id
          required: false
          type: string
      responses:
        "200":
          description: List of recent media entries from a geography subscription.
          schema:
            $ref: "#/definitions/MediaListResponse"
      security:
        - api_key: []
        - instagram_auth:
            - basic
      summary: Send Api 
      tags:
        - Facebook Messenger Send Api
  "/messages":
    post:
      deprecated: true
      description: |
        Get recent media from a geography subscription that you created.

        **Note:** You can only access Geographies that were explicitly created by your OAuth client. Check the
        Geography Subscriptions section of the [real-time updates page](https://instagram.com/developer/realtime/).
        When you create a subscription to some geography that you define, you will be returned a unique `geo-id` that
        can be used in this query. To backfill photos from the location covered by this geography, use the
        [media search endpoint](https://instagram.com/developer/endpoints/media/).

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      parameters:
        - description: The geography ID.
          in: path
          name: geo-id
          required: true
          type: string
        - description: Max number of media to return.
          format: int32
          in: query
          name: count
          required: false
          type: integer
        - description: Return media before this `min_id`.
          in: query
          name: min_id
          required: false
          type: string
      responses:
        "200":
          description: List of recent media entries from a geography subscription.
          schema:
            $ref: "#/definitions/MediaListResponse"
      security:
        - api_key: []
        - instagram_auth:
            - basic
      summary: Webhook
      tags:
        - Facebook Messenger Webhook

components:
  schemas:
    #Messages:
    #  description: List of messages
    #  title: Messages
    #  type: object
    #  items:
    #    $ref: "#/components/schemas/Message"
    #  properties:
    #    messages:
    Message: 
      description: I'm a model's description.
      type: object
      title: Message
      properties:
        id:
          type: string
          description: ID of the message
        thread:
          $ref: "#/components/schemas/Thread"
          description: Thread
        conversation:
          $ref: "#/components/schemas/Conversation"
          description: Conversation
        message:
          $ref: "#/components/schemas/InnerMessage"
          description: Message  
      required:
        - thread
        - conversation
    InnerMessage: 
      description: I'm a model's description.
      type: object
      title: InnerMessage
      properties:
        timestamp:
          type: 
          description: Timestamp of the message in milliseconds
        sender:
          $ref: "#/components/schemas/Sender"
        recipient:
          $ref: "#/components/schemas/Recipient"
        locale:
          type: string
          description: Locale of the message
        content:
          type: object
          description: Content of the message
          oneOf:
            - $ref: '#/components/schemas/Texts'
            - $ref: '#/components/schemas/Speeches'
      required:
        - thread
        - conversation
    Texts:
      type: object
      title: Texts
      properties:
        texts:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/TextMessage'
    Speeches:
      type: object
      title: Speeches
      properties:
        speeches:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SpeechMessage'
    Thread:
        description: I'm a model's description.
        type: object
        title: Thread
        properties:
          id:
            type: string
            default: Default is assigned by our system
            description: ID of the thread
          is_group:
            type: boolean
            default: false
            description: Name of the task
          is_currently_owned:
            type: boolean
            default: false
            description: Boolean indicating if the task has been completed or not
    Conversation:
        description: I'm a model's description.
        type: object
        title: Conversation
        properties:
          id:
            type: string
            description: ID of the conversation
            required: false
          name:
            type: string
            minLength: 1
            maxLength: 100
            description: Name of the task
    Sender:
        description: I'm a model's description.
        type: object
        title: Sender
        properties:
          id:
            type: string
            default: Default is assigned by our system
            description: ID of the sender
          type:
            description: Type of the sender
            enum:
              - user
              - virtual-agent
              - human-agent
            type: string
          locale:
            type: string
            description: Locale of the sender
    Recipient:
        description: I'm a model's description.
        type: object
        title: Recipient
        properties:
          id:
            type: string
            default: Default is assigned by our system
            description: ID of the recipient
    TextMessage: 
        description: I'm a model's description.
        type: object
        title: TextMessage
        properties:
          text:
            type: string
            default: 
            description: Text
        required:
          - text
    SpeechMessage:
        description: I'm a model's description.
        type: object
        title: SpeechMessage
        properties:
          text:
            type: string
            default:  
            description: Text
          ssml:
            type: string
            default:
            description: Ssml
        required:
          oneOf:
            - text
            - ssml
    StickerMessage:
        description: I'm a model's description.
        type: object
        title: StickerMessage
        properties:
          url:
            type: string
            default:  
            description: Text
          sticker_id:
            type: string
            default:
            description: Sticker ID
        required:
          oneOf:
            - text
            - sticker_id
    ImageMessage: 
        description: I'm a model's description.
        type: object
        title: ImageMessage
        properties:
          url:
            type: string
            default:  
            description: Url of the image
          height:
            type: integer
            description: Height of the image
          width:
            type: integer
            description: Width of the image
        required:
          - url
    AudioMessage: 
        description: I'm a model's description.
        type: object
        title: AudioMessage
        properties:
          url:
            type: string
            default:  
            description: Url of the image
          image:
            $ref: "#/components/schemas/ImageMessage"
            description: Image of the audio
          title:
            type: string
            description: Title of the audio
        required:
          - url
    VideoMessage: 
        description: I'm a model's description.
        type: object
        title: VideoMessage
        properties:
          url:
            type: string
            default:  
            description: Url of the video
          title:
            type: string
            description: Height of the video
        required:
          - url
    DocumentMessage: 
        description: I'm a model's description.
        type: object
        title: DocumentMessage
        properties:
          url:
            type: string
            default:  
            description: Url of the document
        required:
          - url
    FileMessage: 
        description: I'm a model's description.
        type: object
        title: FileMessage
        properties:
          url:
            type: string
            default:  
            description: Url of the file
        required:
          - url
    UrlMessage: 
        description: I'm a model's description.
        type: object
        title: UrlMessage
        properties:
          url:
            type: string
            default:  
            description: Url
          is_displayed:
            type: boolean
            description: 
        required:
          - url
    LocationMessage: 
        description: I'm a model's description.
        type: object
        title: LocationMessage
        properties:
          coordinates:
            type: object
            default:  
            properties:
              latitude:
                type: number
                default:  
                description: Latitude of the coordinates
              longitude:
                type: number
                default: 
                description: Longitude of the coordinates
        required:
          - coordinates
    PostbackMessage: 
        description: I'm a model's description.
        type: object
        title: PostbackMessage
        properties:
          title:
            type: string
            description: 
          index:
            type: string
            description: 
        required:
          oneOf: 
            - title
            - index
    SuggestionMessage: 
        description: I'm a model's description.
        type: object
        title: SuggestionMessage
        properties:
          title:
            type: string
            description: 
        required:
          - title
    CardMessage: 
        description: I'm a model's description.
        type: object
        title: CardMessage
        properties:
        required:
    CarouselMessage: 
        description: I'm a model's description.
        type: object
        title: CarouselMessage
        properties:
          items:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                  default:  
                  description: 
                subtitle:
                  type: string
                  default: 
                  description: 
        required:
    ListMessage: 
        description: I'm a model's description.
        type: object
        title: ListMessage
        properties:
        required:
  securitySchemes:
    API Key:
      name: apikey
      type: apiKey
      in: query
      description: Just use `123`. It's super secure ;)
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: number
      description: Return a limited set of results *I'm a shared parameter. I can be reused in multiple endpoints!*
    ID:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: ID of the Todo
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            title: Error
            type: object
            description: A standard error object.
            x-tags:
              - Common
            properties:
              status:
                type: string
                description: A code.
              error:
                type: string
            required:
              - status
              - error
    Unauthorized:
      description: Action not allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
  examples:
    user:
      value:
        userId: 2
        firstName: racks
        lastName: jacson
        phoneNumber: '123456'
        emailAddress: racks.jacson@learningcontainer.com
tags:
  - name: Todos
