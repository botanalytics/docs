"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4083],{48893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var r=t(85893),i=t(3905),s=t(44380);const a={sidebar_position:2,sidebar_label:"Tree",hide_title:!0},o=void 0,l={id:"metrics/behavior/flows/tree",title:"tree",description:"Flows Tree",source:"@site/docs/metrics/behavior/flows/tree.md",sourceDirName:"metrics/behavior/flows",slug:"/metrics/behavior/flows/tree",permalink:"/docs/metrics/behavior/flows/tree",draft:!1,unlisted:!1,editUrl:"https://github.com/botanalytics/docs/tree/master/docs/metrics/behavior/flows/tree.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Tree",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Sankey",permalink:"/docs/metrics/behavior/flows/sankey"},next:{title:"Sunburst",permalink:"/docs/metrics/behavior/flows/sunburst"}},c={},h=[{value:"Flows Tree",id:"flows-tree",level:2},{value:"Interpreting and Understanding the Tree Graph",id:"interpreting-and-understanding-the-tree-graph",level:3},{value:"Nodes",id:"nodes",level:4},{value:"Tree Structure",id:"tree-structure",level:3},{value:"Branches and Sub-Branches",id:"branches-and-sub-branches",level:3},{value:"Colors and Labels",id:"colors-and-labels",level:3},{value:"Interpreting a Flows Tree Graph for a Chatbot",id:"interpreting-a-flows-tree-graph-for-a-chatbot",level:3},{value:"Conversation Structure",id:"conversation-structure",level:4},{value:"Fallback and Escalation Paths",id:"fallback-and-escalation-paths",level:4},{value:"Exit Points Analysis",id:"exit-points-analysis",level:4},{value:"Event-Driven Behavior",id:"event-driven-behavior",level:4},{value:"Use Cases for Flows Tree Graph Analysis",id:"use-cases-for-flows-tree-graph-analysis",level:3},{value:"Chatbot Conversation Design",id:"chatbot-conversation-design",level:4},{value:"Exit Point Optimization",id:"exit-point-optimization",level:4},{value:"User Experience Enhancement",id:"user-experience-enhancement",level:4},{value:"Training and Development",id:"training-and-development",level:4},{value:"Summary",id:"summary",level:3}];function d(e){const n={h2:"h2",h3:"h3",h4:"h4",p:"p",strong:"strong",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"flows-tree",children:"Flows Tree"}),"\n",(0,r.jsx)(n.p,{children:"A flows tree graph for a chatbot, with nodes representing intents, chatbot actions, events/composite events, fallback, exit (when users leave the conversation due to non-completed tasks), escalation, and built-in events, is a visual representation that illustrates the flow of interactions within a chatbot's conversation space in a hierarchical tree-like structure. Unlike a Sankey graph that shows transitions between nodes, a tree graph focuses on displaying the chatbot's conversation structure, making it easier to understand the hierarchy of intents, actions, and events."}),"\n",(0,r.jsx)("img",{src:s.Z,alt:"FlowsTree"}),"\n",(0,r.jsx)(n.h3,{id:"interpreting-and-understanding-the-tree-graph",children:"Interpreting and Understanding the Tree Graph"}),"\n",(0,r.jsx)(n.h4,{id:"nodes",children:"Nodes"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Intents:"}),'\nRepresent the user\'s purpose or goal behind their input, such as "Book a Flight" or "Check Account Balance."']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chatbot Actions:"}),'\nSpecific tasks or operations that the chatbot performs to fulfill user requests, like "Retrieve Flight Options" or "Process Payment."']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Events/Composite Events:"}),'\nTriggers or occurrences within the conversation, including user expressions and contextual cues. Composite events combine multiple intents, events, and built-in events, like "Change Flight Date."']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Fallback:"}),"\nRepresents a state where the chatbot is unable to understand the user's intent and triggers a default response."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exit (User Leaves Conversation):"}),"\nIndicates when the user decides to end the interaction without completion."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Escalation:"}),"\nTransition where the conversation is passed on to a human agent or higher support level."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Built-In Events:"}),'\nSystem-generated events like "Message Delivered" or "Message Read."']}),"\n",(0,r.jsx)(n.h3,{id:"tree-structure",children:"Tree Structure"}),"\n",(0,r.jsx)(n.p,{children:"Nodes are organized hierarchically in the tree graph, forming branches and sub-branches of the conversation tree."}),"\n",(0,r.jsx)(n.h3,{id:"branches-and-sub-branches",children:"Branches and Sub-Branches"}),"\n",(0,r.jsx)(n.p,{children:"The graph visually shows how different intents, actions, events, and other nodes are connected and organized within the conversation flow, with each branch representing a specific user interaction path."}),"\n",(0,r.jsx)(n.h3,{id:"colors-and-labels",children:"Colors and Labels"}),"\n",(0,r.jsx)(n.p,{children:"Different colors and labels are used to differentiate between types of conversation elements, aiding in understanding the graph."}),"\n",(0,r.jsx)(n.h3,{id:"interpreting-a-flows-tree-graph-for-a-chatbot",children:"Interpreting a Flows Tree Graph for a Chatbot"}),"\n",(0,r.jsx)(n.h4,{id:"conversation-structure",children:"Conversation Structure"}),"\n",(0,r.jsx)(n.p,{children:"The tree graph offers a clear view of the hierarchy and structure of the chatbot's conversation, illustrating how different elements are organized within the flow."}),"\n",(0,r.jsx)(n.h4,{id:"fallback-and-escalation-paths",children:"Fallback and Escalation Paths"}),"\n",(0,r.jsx)(n.p,{children:"Highlighted paths show where fallback responses and escalation to human agents occur, providing insights into the chatbot's response strategies."}),"\n",(0,r.jsx)(n.h4,{id:"exit-points-analysis",children:"Exit Points Analysis"}),"\n",(0,r.jsx)(n.p,{children:"Identification of common exit points helps in improving user engagement and task completion."}),"\n",(0,r.jsx)(n.h4,{id:"event-driven-behavior",children:"Event-Driven Behavior"}),"\n",(0,r.jsx)(n.p,{children:"Indicates how events influence the flow of the conversation and trigger specific actions."}),"\n",(0,r.jsx)(n.h3,{id:"use-cases-for-flows-tree-graph-analysis",children:"Use Cases for Flows Tree Graph Analysis"}),"\n",(0,r.jsx)(n.h4,{id:"chatbot-conversation-design",children:"Chatbot Conversation Design"}),"\n",(0,r.jsx)(n.p,{children:"Visualize and refine the conversation structure to make it more intuitive and user-friendly."}),"\n",(0,r.jsx)(n.h4,{id:"exit-point-optimization",children:"Exit Point Optimization"}),"\n",(0,r.jsx)(n.p,{children:"Improve user engagement and task completion by addressing issues related to exit points."}),"\n",(0,r.jsx)(n.h4,{id:"user-experience-enhancement",children:"User Experience Enhancement"}),"\n",(0,r.jsx)(n.p,{children:"Optimize the user experience by addressing flow and engagement issues."}),"\n",(0,r.jsx)(n.h4,{id:"training-and-development",children:"Training and Development"}),"\n",(0,r.jsx)(n.p,{children:"Train the chatbot to handle various conversation paths and events more effectively."}),"\n",(0,r.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"In summary, a flows tree graph for a chatbot provides a visual representation of the conversation structure and flow, aiding in understanding how different nodes are connected and organized within the chatbot's interactions."})]})}function p(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3905:(e,n,t)=>{t.d(n,{ah:()=>c});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),u=i,v=p["".concat(l,".").concat(u)]||p[u]||h[u]||s;return t?r.createElement(v,a(a({ref:n},d),{},{components:t})):r.createElement(v,a({ref:n},d))}));d.displayName="MDXCreateElement"},44380:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Flows-Tree-6479970a72af13f6b44bcbeebdb0d62d.png"}}]);